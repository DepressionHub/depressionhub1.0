datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String           @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           Role             @default(USER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  therapist      Therapist[]
  TherapySession TherapySession[]
}

model Therapist {
  id             Int              @id @default(autoincrement())
  userId         String           @unique
  user           User             @relation(fields: [userId], references: [id])
  bio            String?
  specialties    String[]
  ratePerSession Float
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  sessions       TherapySession[]
}

model TherapySession {
  id            Int           @id @default(autoincrement())
  userId        String
  therapistId   Int
  dateTime      DateTime
  amount        Float
  status        SessionStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  therapist     Therapist     @relation(fields: [therapistId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  USER
  THERAPIST
}

enum SessionStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}
