datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int                 @id @default(autoincrement())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  walletAddress      String
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  sessions           TherapySession[]    @relation("UserSessions")
  accounts           Account[]
  verificationTokens VerificationToken[] @relation("UserVerificationTokens")
  therapist          Therapist?
  userSessions       Session[]           @relation("UserSessions")
}

model Therapist {
  id            Int              @id @default(autoincrement())
  userId        Int              @unique
  user          User             @relation(fields: [userId], references: [id])
  bio           String?
  specialties   String[]
  ratePerSession Float
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  sessions      TherapySession[] @relation("TherapistSessions")
}

model TherapySession {
  id           Int           @id @default(autoincrement())
  userId       Int
  therapistId  Int
  dateTime     DateTime
  amount       Float
  status       SessionStatus @default(PENDING)
  transactionId String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation("UserSessions", fields: [userId], references: [id])
  therapist    Therapist     @relation("TherapistSessions", fields: [therapistId], references: [id])
}

model Account {
  id               Int     @id @default(autoincrement())
  userId           Int
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String  @unique
  expires    DateTime
  userId     Int
  user       User    @relation("UserVerificationTokens", fields: [userId], references: [id])

  @@unique([identifier, token])
}

enum Role {
  USER
  THERAPIST
}

enum SessionStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}